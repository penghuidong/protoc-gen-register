// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: register.proto

package register

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterFileOptions struct {
	MsgPrefix            string   `protobuf:"bytes,1,opt,name=msg_prefix,json=msgPrefix,proto3" json:"msg_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterFileOptions) Reset()         { *m = RegisterFileOptions{} }
func (m *RegisterFileOptions) String() string { return proto.CompactTextString(m) }
func (*RegisterFileOptions) ProtoMessage()    {}
func (*RegisterFileOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1303fe8288f4efb6, []int{0}
}
func (m *RegisterFileOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterFileOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterFileOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterFileOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterFileOptions.Merge(m, src)
}
func (m *RegisterFileOptions) XXX_Size() int {
	return m.Size()
}
func (m *RegisterFileOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterFileOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterFileOptions proto.InternalMessageInfo

func (m *RegisterFileOptions) GetMsgPrefix() string {
	if m != nil {
		return m.MsgPrefix
	}
	return ""
}

type RegisterMessageOptions struct {
	RegistName           string   `protobuf:"bytes,1,opt,name=regist_name,json=registName,proto3" json:"regist_name,omitempty"`
	Regist_Id            uint32   `protobuf:"varint,2,opt,name=regist_Id,json=registId,proto3" json:"regist_Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterMessageOptions) Reset()         { *m = RegisterMessageOptions{} }
func (m *RegisterMessageOptions) String() string { return proto.CompactTextString(m) }
func (*RegisterMessageOptions) ProtoMessage()    {}
func (*RegisterMessageOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1303fe8288f4efb6, []int{1}
}
func (m *RegisterMessageOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterMessageOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterMessageOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterMessageOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMessageOptions.Merge(m, src)
}
func (m *RegisterMessageOptions) XXX_Size() int {
	return m.Size()
}
func (m *RegisterMessageOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMessageOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMessageOptions proto.InternalMessageInfo

func (m *RegisterMessageOptions) GetRegistName() string {
	if m != nil {
		return m.RegistName
	}
	return ""
}

func (m *RegisterMessageOptions) GetRegist_Id() uint32 {
	if m != nil {
		return m.Regist_Id
	}
	return 0
}

var E_RegFileOpts = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FileOptions)(nil),
	ExtensionType: (*RegisterFileOptions)(nil),
	Field:         50001,
	Name:          "register.RegFileOpts",
	Tag:           "bytes,50001,opt,name=RegFileOpts",
	Filename:      "register.proto",
}

var E_RegMsgOpts = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MessageOptions)(nil),
	ExtensionType: (*RegisterMessageOptions)(nil),
	Field:         50001,
	Name:          "register.RegMsgOpts",
	Tag:           "bytes,50001,opt,name=RegMsgOpts",
	Filename:      "register.proto",
}

func init() {
	proto.RegisterType((*RegisterFileOptions)(nil), "register.RegisterFileOptions")
	proto.RegisterType((*RegisterMessageOptions)(nil), "register.RegisterMessageOptions")
	proto.RegisterExtension(E_RegFileOpts)
	proto.RegisterExtension(E_RegMsgOpts)
}

func init() { proto.RegisterFile("register.proto", fileDescriptor_1303fe8288f4efb6) }

var fileDescriptor_1303fe8288f4efb6 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xbf, 0xf9, 0x04, 0xb1, 0x53, 0x74, 0x11, 0x41, 0x8a, 0xda, 0x34, 0x74, 0xd5, 0x4d,
	0x27, 0xa0, 0xae, 0x2a, 0xb8, 0x70, 0x21, 0x74, 0x51, 0x2d, 0xb3, 0x70, 0xe1, 0x26, 0xe4, 0xcf,
	0xed, 0xed, 0x40, 0x33, 0x13, 0x32, 0x13, 0xe8, 0x13, 0xf8, 0x0c, 0x3e, 0x92, 0x4b, 0x7d, 0x03,
	0x89, 0x2f, 0x22, 0x26, 0x93, 0x90, 0x52, 0x97, 0x73, 0x38, 0xf7, 0x9c, 0xdf, 0x61, 0xe8, 0x49,
	0x0e, 0x28, 0xb4, 0x81, 0x9c, 0x65, 0xb9, 0x32, 0xca, 0x39, 0x6a, 0xde, 0xe7, 0x1e, 0x2a, 0x85,
	0x1b, 0xf0, 0x2b, 0x3d, 0x2a, 0x56, 0x7e, 0x02, 0x3a, 0xce, 0x45, 0x66, 0x94, 0xf5, 0x8e, 0x6f,
	0xe8, 0x29, 0xb7, 0xee, 0x07, 0xb1, 0x81, 0xa7, 0xcc, 0x08, 0x25, 0xb5, 0x33, 0xa4, 0x34, 0xd5,
	0x18, 0x64, 0x39, 0xac, 0xc4, 0x76, 0x40, 0x3c, 0x32, 0xe9, 0xf1, 0x5e, 0xaa, 0x71, 0x59, 0x09,
	0xe3, 0x67, 0x7a, 0xd6, 0x5c, 0x2d, 0x40, 0xeb, 0x10, 0xdb, 0xc3, 0x11, 0xed, 0xd7, 0xed, 0x81,
	0x0c, 0x53, 0xb0, 0x97, 0xb4, 0x96, 0x1e, 0xc3, 0x14, 0x9c, 0x0b, 0xda, 0xb3, 0x86, 0x79, 0x32,
	0xf8, 0xef, 0x91, 0xc9, 0x31, 0xb7, 0xbc, 0xf3, 0x64, 0x16, 0xd0, 0x3e, 0x07, 0xb4, 0x20, 0xda,
	0xb9, 0x64, 0x35, 0x3f, 0x6b, 0xf8, 0x59, 0x87, 0x71, 0xf0, 0xf9, 0x7a, 0xe0, 0x91, 0x49, 0xff,
	0x6a, 0xc8, 0xda, 0xfd, 0x7f, 0x4c, 0xe1, 0xdd, 0xc4, 0x59, 0x4c, 0x29, 0x07, 0x5c, 0x68, 0xac,
	0xf2, 0x47, 0x7b, 0xf9, 0xbb, 0x6b, 0xda, 0x0a, 0x6f, 0xbf, 0x62, 0xd7, 0xc9, 0x3b, 0xb1, 0xf7,
	0xcb, 0xf7, 0xd2, 0x25, 0x1f, 0xa5, 0x4b, 0xbe, 0x4a, 0x97, 0xbc, 0x7d, 0xbb, 0xff, 0x5e, 0xee,
	0x50, 0x98, 0x75, 0x11, 0xb1, 0x58, 0xa5, 0x7e, 0x06, 0x12, 0xd7, 0x85, 0x48, 0x94, 0xc4, 0xfa,
	0x5f, 0xe2, 0x29, 0x82, 0x9c, 0x36, 0x05, 0x3e, 0x6c, 0x0d, 0x48, 0xfd, 0x1b, 0x7a, 0xdb, 0x68,
	0xd1, 0x61, 0x65, 0xbc, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xa4, 0x51, 0x6c, 0xea, 0x01,
	0x00, 0x00,
}

func (m *RegisterFileOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterFileOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterFileOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MsgPrefix) > 0 {
		i -= len(m.MsgPrefix)
		copy(dAtA[i:], m.MsgPrefix)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.MsgPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterMessageOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterMessageOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterMessageOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Regist_Id != 0 {
		i = encodeVarintRegister(dAtA, i, uint64(m.Regist_Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RegistName) > 0 {
		i -= len(m.RegistName)
		copy(dAtA[i:], m.RegistName)
		i = encodeVarintRegister(dAtA, i, uint64(len(m.RegistName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegister(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegister(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterFileOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgPrefix)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterMessageOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistName)
	if l > 0 {
		n += 1 + l + sovRegister(uint64(l))
	}
	if m.Regist_Id != 0 {
		n += 1 + sovRegister(uint64(m.Regist_Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRegister(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegister(x uint64) (n int) {
	return sovRegister(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterFileOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterFileOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterFileOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterMessageOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterMessageOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterMessageOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegister
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegister
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regist_Id", wireType)
			}
			m.Regist_Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Regist_Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegister(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegister
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegister
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegister
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegister
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegister
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegister        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegister          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegister = fmt.Errorf("proto: unexpected end of group")
)
